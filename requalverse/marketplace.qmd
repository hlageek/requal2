---
title: "Requalverse Marketplace"
categories:
  - requalverse
---

## How to install and use extension modules

Requal extensions are installed as any other R package. To use an extension module, simply install it according to the developer's instructions and run Requal as usual. If the extension module is available on your system, it will be automatically detected when you start the Requal app. You can access and launch extensions from the Modules tab in the Requal app.

::: {.callout-warning}
Requal extension modules have access to your project, so you should only install extensions from trusted sources. It is recommened to make a backup of your project database before launching an unknown extension. **Listing of an extension on this page does NOT guarantee that it is safe to use.**
:::

## Available extension modules

::: {.callout-note}
Because this is a static website, the marketplace information may not be up to date.  
Last updated: `r format(Sys.time(), "%B %d, %Y")`.
:::

```{r}
#| echo: false
#| warning: false
#| message: false
#| results: asis

library(htmltools)
library(jsonlite)
library(purrr)
library(shiny)

# Load packages from R-universe API and transpose for easier access
packages_raw <- fromJSON("https://hlageek.r-universe.dev/api/packages/", flatten = TRUE)
packages <- transpose(packages_raw)

# Filter packages that have marketplace = true
marketplace_packages <- packages[
  map_lgl(packages, ~ !is.na(.x$`_metadata.requalverse.marketplace`) && .x$`_metadata.requalverse.marketplace` == TRUE)
]

# Function to extract package data safely
extract_package_data <- function(pkg) {
  
  # Safe check function
  is_missing <- function(x) {
    is.null(x) || (length(x) == 1 && is.na(x))
  }
  
  list(
    name = pkg$Package,
    url = pkg$URL %||% pkg$RemoteUrl %||% "#",
    description = if(is_missing(pkg$Description)) NULL else pkg$Description,
    categories = if(is_missing(pkg$`_metadata.requalverse.category`)) {
      NULL
    } else {
      paste(pkg$`_metadata.requalverse.category`, collapse = ", ")
    },
    origin = if(is_missing(pkg$`_metadata.requalverse.package_origin`)) {
      "requal"
    } else {
      as.character(pkg$`_metadata.requalverse.package_origin`)
    },
    logo_url = if(is_missing(pkg$`_metadata.requalverse.logo`)) {
      NULL
    } else {
      pkg$`_metadata.requalverse.logo`
    }
  )
}

# Function to create HTML card from extracted data
create_card_html <- function(data) {
  
  # Create logo element
  logo_element <- if(is.null(data$logo_url)) {
    div(
      class = "requalverse-icon-placeholder",
      icon("puzzle-piece", style = "font-size: 20px;")
    )
  } else {
    img(
      src = data$logo_url, 
      class = "requalverse-logo",
      alt = paste(data$name, "logo")
    )
  }
  
  # Create badge class
  badge_class <- switch(data$origin,
    "requal" = "requalverse-badge requalverse-badge-requal",
    "verified" = "requalverse-badge requalverse-badge-verified", 
    "community" = "requalverse-badge requalverse-badge-community",
    "requalverse-badge requalverse-badge-community"
  )
  
  # Create data-category attribute for filtering
  data_category <- if(!is.null(data$categories)) {
    # Split by comma, trim whitespace, convert to lowercase, join with commas
    categories_clean <- trimws(strsplit(data$categories, ",")[[1]])
    tolower(paste(categories_clean, collapse = ", "))
  } else {
    ""
  }
  
  # Create card
  div(
    class = "card mb-3 requalverse-card package-card",
    `data-category` = data_category,
    div(
      class = "card-body",
      
      # Header
      div(
        class = "requalverse-header",
        
        # Logo
        div(class = "requalverse-logo-container", logo_element),
        
        # Title and badge
        div(
          class = "requalverse-title-badge-container",
          h4(
            class = "card-title mb-0",
            a(
              href = data$url,
              target = "_blank",
              style = "text-decoration: none; color: inherit;",
              data$name
            )
          ),
          span(class = badge_class, toupper(data$origin))
        )
      ),
      
      # Description
      if(!is.null(data$description)) {
        p(class = "card-text text-muted mb-2", data$description)
      },
      
      # Categories
      if(!is.null(data$categories)) {
        p(
          class = "card-text mb-0",
          strong("Categories: "),
          span(class = "text-muted", data$categories)
        )
      }
    )
  )
}

# Function to create category filters
create_category_filters <- function(package_data_list) {
  # Extract unique categories
  all_categories <- unique(unlist(map(package_data_list, function(x) {
    if(!is.null(x$categories)) {
      trimws(strsplit(x$categories, ",")[[1]])
    }
  })))
  
  # Remove any empty strings
  all_categories <- all_categories[nzchar(all_categories)]
  
  if(length(all_categories) == 0) {
    return(NULL)
  }
  
  # Create filter HTML
  div(
    class = "filter-container",
    h4("Filter by Category:", class = "mb-3"),
    
    # All filter (checked by default)
    tags$input(type = "radio", id = "filter-all", name = "category-filter", class = "filter-radio", checked = NA),
    tags$label(`for` = "filter-all", class = "filter-label", "All"),
    
    # Individual category filters
    map(all_categories, function(cat) {
      cat_id <- paste0("filter-", tolower(gsub("[^a-z]", "-", cat)))
      tagList(
        tags$input(type = "radio", id = cat_id, name = "category-filter", class = "filter-radio"),
        tags$label(`for` = cat_id, class = "filter-label", cat)
      )
    })
  )
}

# Function to generate and write CSS selectors for categories
generate_css_selectors <- function(package_data_list) {
  # Extract unique categories
  all_categories <- unique(unlist(map(package_data_list, function(x) {
    if(!is.null(x$categories)) {
      trimws(strsplit(x$categories, ",")[[1]])
    }
  })))
  
  # Remove any empty strings
  all_categories <- all_categories[nzchar(all_categories)]
  
  # Generate CSS content including toggle functionality
  css_content <- map_chr(all_categories, function(cat) {
      cat_id <- paste0("filter-", tolower(gsub("[^a-z]", "-", cat)))
      cat_selector <- cat  # Keep original category name for data-category matching
      sprintf("#%s:checked ~ .packages-container .package-card[data-category*=\"%s\"] {\n  display: block;\n}", cat_id, cat_selector)
    })
  
  # Write to file
  writeLines(css_content, "requalverse-category-filters.css")
}

# Extract data for all marketplace packages
package_data_list <- map(marketplace_packages, extract_package_data)

# Generate CSS selectors for easy copy-paste and write to file
generate_css_selectors(package_data_list)

# Create category filters
category_filters <- create_category_filters(package_data_list)

# Create HTML for all packages
package_cards <- map(package_data_list, create_card_html)

# Create the final listing
div(
  class = "container-fluid",
  
  # Toggle button for filters
  tags$button(
    class = "filter-toggle",
    onclick = "document.querySelector('.filters-only').classList.toggle('show')",
    "Show/Hide Filters"
  ),
  
  # Just the filter controls (hidden by default) 
  div(
    class = "filters-only",
    h4("Filter by Category:", class = "mb-3")
  ),
  
  # Radio buttons as direct children (for CSS sibling selector to work)
  if(!is.null(category_filters)) {
    tagList(
      # All filter (checked by default)
      tags$input(type = "radio", id = "filter-all", name = "category-filter", class = "filter-radio", checked = NA, style = "display: none;"),
      tags$label(`for` = "filter-all", class = "filter-label filters-only-content", "All"),
      
      # Individual category filters  
      map(unique(unlist(map(package_data_list, function(x) {
        if(!is.null(x$categories)) {
          trimws(strsplit(x$categories, ",")[[1]])
        }
      }))), function(cat) {
        cat_id <- paste0("filter-", tolower(gsub("[^a-z]", "-", cat)))
        tagList(
          tags$input(type = "radio", id = cat_id, name = "category-filter", class = "filter-radio", style = "display: none;"),
          tags$label(`for` = cat_id, class = "filter-label filters-only-content", cat)
        )
      })
    )
  },
  
  # Packages container (always visible, now sibling to radio buttons)
  div(
    class = "packages-container",
    package_cards
  )
)
```