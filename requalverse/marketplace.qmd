---
title: "Requalverse Marketplace"
categories:
  - requalverse
---

```{r}
#| echo: false
#| warning: false
#| message: false
#| results: asis

library(htmltools)
library(jsonlite)
library(purrr)
library(shiny)

# Load packages from R-universe API and transpose for easier access
packages_raw <- fromJSON("https://hlageek.r-universe.dev/api/packages/", flatten = TRUE)
packages <- transpose(packages_raw)

# Filter packages that have marketplace = true
marketplace_packages <- packages[
  map_lgl(packages, ~ !is.na(.x$`_metadata.requalverse.marketplace`) && .x$`_metadata.requalverse.marketplace` == TRUE)
]

# Function to extract package data safely
extract_package_data <- function(pkg) {
  
  # Safe check function
  is_missing <- function(x) {
    is.null(x) || (length(x) == 1 && is.na(x))
  }
  
  list(
    name = pkg$Package,
    url = pkg$URL %||% pkg$RemoteUrl %||% "#",
    description = if(is_missing(pkg$Description)) NULL else pkg$Description,
    categories = if(is_missing(pkg$`_metadata.requalverse.category`)) {
      NULL
    } else {
      paste(pkg$`_metadata.requalverse.category`, collapse = ", ")
    },
    origin = if(is_missing(pkg$`_metadata.requalverse.package_origin`)) {
      "requal"
    } else {
      as.character(pkg$`_metadata.requalverse.package_origin`)
    },
    logo_url = if(is_missing(pkg$`_metadata.requalverse.logo`)) {
      NULL
    } else {
      pkg$`_metadata.requalverse.logo`
    }
  )
}

# Function to create HTML card from extracted data
create_card_html <- function(data) {
  
  # Create logo element
  logo_element <- if(is.null(data$logo_url)) {
    div(
      class = "requalverse-icon-placeholder",
      icon("puzzle-piece", style = "font-size: 20px;")
    )
  } else {
    img(
      src = data$logo_url, 
      class = "requalverse-logo",
      alt = paste(data$name, "logo")
    )
  }
  
  # Create badge class
  badge_class <- switch(data$origin,
    "requal" = "requalverse-badge requalverse-badge-requal",
    "verified" = "requalverse-badge requalverse-badge-verified", 
    "community" = "requalverse-badge requalverse-badge-community",
    "requalverse-badge requalverse-badge-community"
  )
  
  # Create data-category attribute for filtering
  data_category <- if(!is.null(data$categories)) {
    # Split by comma, trim whitespace, convert to lowercase, join with commas
    categories_clean <- trimws(strsplit(data$categories, ",")[[1]])
    tolower(paste(categories_clean, collapse = ", "))
  } else {
    ""
  }
  
  # Create card
  div(
    class = "card mb-3 requalverse-card package-card",
    `data-category` = data_category,
    div(
      class = "card-body",
      
      # Header
      div(
        class = "requalverse-header",
        
        # Logo
        div(class = "requalverse-logo-container", logo_element),
        
        # Title and badge
        div(
          class = "requalverse-title-badge-container",
          h4(
            class = "card-title mb-0",
            a(
              href = data$url,
              target = "_blank",
              style = "text-decoration: none; color: inherit;",
              data$name
            )
          ),
          span(class = badge_class, toupper(data$origin))
        )
      ),
      
      # Description
      if(!is.null(data$description)) {
        p(class = "card-text text-muted mb-2", data$description)
      },
      
      # Categories
      if(!is.null(data$categories)) {
        p(
          class = "card-text mb-0",
          strong("Categories: "),
          span(class = "text-muted", data$categories)
        )
      }
    )
  )
}

# Function to create category filters
create_category_filters <- function(package_data_list) {
  # Extract unique categories
  all_categories <- unique(unlist(map(package_data_list, function(x) {
    if(!is.null(x$categories)) {
      trimws(strsplit(x$categories, ",")[[1]])
    }
  })))
  
  # Remove any empty strings
  all_categories <- all_categories[nzchar(all_categories)]
  
  if(length(all_categories) == 0) {
    return(NULL)
  }
  
  # Create filter HTML
  div(
    class = "filter-container",
    h4("Filter by Category:", class = "mb-3"),
    
    # All filter (checked by default)
    tags$input(type = "radio", id = "filter-all", name = "category-filter", class = "filter-radio", checked = NA),
    tags$label(`for` = "filter-all", class = "filter-label", "All"),
    
    # Individual category filters
    map(all_categories, function(cat) {
      cat_id <- paste0("filter-", tolower(gsub("[^a-z]", "-", cat)))
      tagList(
        tags$input(type = "radio", id = cat_id, name = "category-filter", class = "filter-radio"),
        tags$label(`for` = cat_id, class = "filter-label", cat)
      )
    })
  )
}

# Function to generate and write CSS selectors for categories
generate_css_selectors <- function(package_data_list) {
  # Extract unique categories
  all_categories <- unique(unlist(map(package_data_list, function(x) {
    if(!is.null(x$categories)) {
      trimws(strsplit(x$categories, ",")[[1]])
    }
  })))
  
  # Remove any empty strings
  all_categories <- all_categories[nzchar(all_categories)]
  
  # Generate CSS content including toggle functionality
  css_content <- c(
    "/* Generated CSS selectors for requalverse categories */",
    "",
    "/* Filter toggle functionality */",
    ".filter-toggle {",
    "  display: inline-block;",
    "  padding: 8px 16px;",
    "  margin-bottom: 1rem;",
    "  background-color: #6c757d;",
    "  color: white;",
    "  border: none;",
    "  border-radius: 6px;",
    "  cursor: pointer;",
    "  font-size: 0.9em;",
    "  transition: background-color 0.2s;",
    "}",
    "",
    ".filter-toggle:hover {",
    "  background-color: #5a6268;",
    "}",
    "",
    ".filters-only {",
    "  display: none;",
    "  margin-bottom: 1rem;",
    "}",
    "",
    ".filters-only.show {",
    "  display: block;",
    "}",
    "",
    ".filters-only-content {",
    "  display: none;",
    "}",
    "",
    ".filters-only.show ~ .filters-only-content {",
    "  display: inline-block;",
    "}",
    "",
    map_chr(all_categories, function(cat) {
      cat_id <- paste0("filter-", tolower(gsub("[^a-z]", "-", cat)))
      cat_selector <- cat  # Keep original category name for data-category matching
      sprintf("#%s:checked ~ .packages-container .package-card[data-category*=\"%s\"] {\n  display: block;\n}", cat_id, cat_selector)
    })
  )
  
  # Write to file
  writeLines(css_content, "requalverse-category-filters.css")
}

# Extract data for all marketplace packages
package_data_list <- map(marketplace_packages, extract_package_data)

# Generate CSS selectors for easy copy-paste and write to file
generate_css_selectors(package_data_list)

# Create category filters
category_filters <- create_category_filters(package_data_list)

# Create HTML for all packages
package_cards <- map(package_data_list, create_card_html)

# Create the final listing
div(
  class = "container-fluid",
  h2("Available Packages", class = "mb-4"),
  
  # Toggle button for filters
  tags$button(
    class = "filter-toggle",
    onclick = "document.querySelector('.filters-only').classList.toggle('show')",
    "Show/Hide Filters"
  ),
  
  # Just the filter controls (hidden by default) 
  div(
    class = "filters-only",
    h4("Filter by Category:", class = "mb-3")
  ),
  
  # Radio buttons as direct children (for CSS sibling selector to work)
  if(!is.null(category_filters)) {
    tagList(
      # All filter (checked by default)
      tags$input(type = "radio", id = "filter-all", name = "category-filter", class = "filter-radio", checked = NA, style = "display: none;"),
      tags$label(`for` = "filter-all", class = "filter-label filters-only-content", "All"),
      
      # Individual category filters  
      map(unique(unlist(map(package_data_list, function(x) {
        if(!is.null(x$categories)) {
          trimws(strsplit(x$categories, ",")[[1]])
        }
      }))), function(cat) {
        cat_id <- paste0("filter-", tolower(gsub("[^a-z]", "-", cat)))
        tagList(
          tags$input(type = "radio", id = cat_id, name = "category-filter", class = "filter-radio", style = "display: none;"),
          tags$label(`for` = cat_id, class = "filter-label filters-only-content", cat)
        )
      })
    )
  },
  
  # Packages container (always visible, now sibling to radio buttons)
  div(
    class = "packages-container",
    package_cards
  )
)
```